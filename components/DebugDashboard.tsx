/**
 * Comprehensive Debug Dashboard for React Native Multi-Stream App
 * Provides real-time debugging tools, performance metrics, and system information
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Modal,
  TextInput,
  Alert,
  Switch,
  FlatList,
  Dimensions,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import {
  Activity,
  AlertCircle,
  BarChart3,
  Bug,
  Clock,
  Code,
  Cpu,
  Database,
  Eye,
  FileText,
  HardDrive,
  Info,
  Monitor,
  Network,
  Pause,
  Play,
  RefreshCw,
  Settings,
  Smartphone,
  Trash2,
  Wifi,
  X,
  Zap,
} from 'lucide-react-native';
import { usePerformanceMonitor, performanceMonitor } from '@/utils/performanceMonitor';
import { useAppStore, usePerformanceMetrics, useActiveStreams } from '@/store/useAppStore';
import { ModernTheme } from '@/theme/modernTheme';

interface DebugDashboardProps {
  visible: boolean;
  onClose: () => void;
}

interface SystemInfo {
  platform: string;
  version: string;
  userAgent: string;
  screenDimensions: { width: number; height: number };
  deviceMemory?: number;
  connection?: any;
  batteryLevel?: number;
  isCharging?: boolean;
}

interface LogEntry {
  id: string;
  timestamp: number;
  level: 'debug' | 'info' | 'warn' | 'error';
  message: string;
  category: string;
  data?: any;
}

export const DebugDashboard: React.FC<DebugDashboardProps> = ({ visible, onClose }) => {
  const { width, height } = Dimensions.get('window');
  
  // Performance monitoring
  const {
    isMonitoring,
    report,
    startMonitoring,
    stopMonitoring,
    generateReport,
    clearData,
  } = usePerformanceMonitor();
  
  // Store data
  const activeStreams = useActiveStreams();
  const performanceMetrics = usePerformanceMetrics();
  const appState = useAppStore();
  
  // Local state
  const [activeTab, setActiveTab] = useState<'performance' | 'system' | 'logs' | 'network' | 'storage'>('performance');
  const [systemInfo, setSystemInfo] = useState<SystemInfo | null>(null);
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [logFilter, setLogFilter] = useState<string>('');
  const [autoRefresh, setAutoRefresh] = useState<boolean>(true);
  const [refreshInterval, setRefreshInterval] = useState<number>(2000);
  const [expandedSections, setExpandedSections] = useState<Set<string>>(new Set());
  
  // Gather system information
  useEffect(() => {
    const gatherSystemInfo = async () => {
      const info: SystemInfo = {
        platform: 'React Native',
        version: '0.79.5',
        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'N/A',
        screenDimensions: { width, height },
      };
      
      // Try to get additional info if available
      try {
        if ('memory' in navigator) {
          info.deviceMemory = (navigator as any).deviceMemory;
        }
        
        if ('connection' in navigator) {
          info.connection = (navigator as any).connection;
        }
        
        if ('battery' in navigator) {
          const battery = await (navigator as any).getBattery();
          info.batteryLevel = battery.level;
          info.isCharging = battery.charging;
        }
      } catch (error) {
        console.log('Some system info not available:', error);
      }
      
      setSystemInfo(info);
    };
    
    if (visible) {
      gatherSystemInfo();
    }
  }, [visible, width, height]);
  
  // Setup logging interceptor
  useEffect(() => {
    if (!visible) return;
    
    const originalConsole = {\n      debug: console.debug,\n      info: console.info,\n      warn: console.warn,\n      error: console.error,\n    };\n    \n    const interceptLog = (level: keyof typeof originalConsole, ...args: any[]) => {\n      // Call original console method\n      originalConsole[level](...args);\n      \n      // Create log entry\n      const logEntry: LogEntry = {\n        id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: Date.now(),\n        level: level as any,\n        message: args.map(arg => \n          typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)\n        ).join(' '),\n        category: 'console',\n        data: args.length === 1 && typeof args[0] === 'object' ? args[0] : undefined,\n      };\n      \n      setLogs(prevLogs => {\n        const newLogs = [logEntry, ...prevLogs.slice(0, 99)]; // Keep last 100 logs\n        return newLogs;\n      });\n    };\n    \n    // Override console methods\n    console.debug = (...args) => interceptLog('debug', ...args);\n    console.info = (...args) => interceptLog('info', ...args);\n    console.warn = (...args) => interceptLog('warn', ...args);\n    console.error = (...args) => interceptLog('error', ...args);\n    \n    return () => {\n      // Restore original console methods\n      Object.assign(console, originalConsole);\n    };\n  }, [visible]);\n  \n  // Auto-refresh performance data\n  useEffect(() => {\n    if (!visible || !autoRefresh) return;\n    \n    const interval = setInterval(() => {\n      generateReport();\n    }, refreshInterval);\n    \n    return () => clearInterval(interval);\n  }, [visible, autoRefresh, refreshInterval, generateReport]);\n  \n  // Toggle section expansion\n  const toggleSection = useCallback((sectionId: string) => {\n    setExpandedSections(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sectionId)) {\n        newSet.delete(sectionId);\n      } else {\n        newSet.add(sectionId);\n      }\n      return newSet;\n    });\n  }, []);\n  \n  // Filter logs\n  const filteredLogs = useMemo(() => {\n    if (!logFilter.trim()) return logs;\n    \n    const filter = logFilter.toLowerCase();\n    return logs.filter(log => \n      log.message.toLowerCase().includes(filter) ||\n      log.category.toLowerCase().includes(filter) ||\n      log.level.toLowerCase().includes(filter)\n    );\n  }, [logs, logFilter]);\n  \n  // Export debug data\n  const exportDebugData = useCallback(() => {\n    const debugData = {\n      timestamp: new Date().toISOString(),\n      systemInfo,\n      performanceReport: report,\n      activeStreams: activeStreams.map(s => ({...s, thumbnail_url: '[REDACTED]'})),\n      appState: {\n        ...appState,\n        // Redact sensitive data\n        activeStreams: '[REDACTED]',\n      },\n      logs: logs.slice(0, 50), // Last 50 logs\n      performanceMetrics,\n    };\n    \n    const dataString = JSON.stringify(debugData, null, 2);\n    \n    Alert.alert(\n      'Debug Data Exported',\n      `Debug data has been generated (${(dataString.length / 1024).toFixed(1)} KB)`,\n      [\n        { text: 'Copy to Clipboard', onPress: () => console.log('Debug data:', dataString) },\n        { text: 'Close' },\n      ]\n    );\n  }, [systemInfo, report, activeStreams, appState, logs, performanceMetrics]);\n  \n  if (!visible) return null;\n  \n  return (\n    <Modal visible={visible} animationType=\"slide\" presentationStyle=\"pageSheet\">\n      <View style={styles.container}>\n        <LinearGradient\n          colors={[ModernTheme.colors.background.primary, ModernTheme.colors.background.secondary]}\n          style={styles.gradient}\n        >\n          {/* Header */}\n          <View style={styles.header}>\n            <LinearGradient\n              colors={[ModernTheme.colors.primary[900], ModernTheme.colors.background.primary]}\n              style={styles.headerGradient}\n            >\n              <View style={styles.headerContent}>\n                <View style={styles.headerLeft}>\n                  <Bug size={24} color={ModernTheme.colors.primary[400]} />\n                  <Text style={styles.headerTitle}>Debug Dashboard</Text>\n                </View>\n                <View style={styles.headerRight}>\n                  <TouchableOpacity\n                    style={styles.headerButton}\n                    onPress={exportDebugData}\n                  >\n                    <FileText size={20} color={ModernTheme.colors.text.primary} />\n                  </TouchableOpacity>\n                  <TouchableOpacity\n                    style={styles.headerButton}\n                    onPress={onClose}\n                  >\n                    <X size={20} color={ModernTheme.colors.text.primary} />\n                  </TouchableOpacity>\n                </View>\n              </View>\n            </LinearGradient>\n          </View>\n          \n          {/* Tab Navigation */}\n          <View style={styles.tabContainer}>\n            <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n              {[\n                { id: 'performance', label: 'Performance', icon: Activity },\n                { id: 'system', label: 'System', icon: Smartphone },\n                { id: 'logs', label: 'Logs', icon: FileText },\n                { id: 'network', label: 'Network', icon: Wifi },\n                { id: 'storage', label: 'Storage', icon: Database },\n              ].map(tab => {\n                const isActive = activeTab === tab.id;\n                const IconComponent = tab.icon;\n                \n                return (\n                  <TouchableOpacity\n                    key={tab.id}\n                    style={[styles.tab, isActive && styles.activeTab]}\n                    onPress={() => setActiveTab(tab.id as any)}\n                  >\n                    <IconComponent size={18} color={isActive ? ModernTheme.colors.primary[400] : ModernTheme.colors.text.secondary} />\n                    <Text style={[styles.tabText, isActive && styles.activeTabText]}>\n                      {tab.label}\n                    </Text>\n                  </TouchableOpacity>\n                );\n              })}\n            </ScrollView>\n          </View>\n          \n          {/* Content */}\n          <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>\n            {activeTab === 'performance' && (\n              <PerformanceTab\n                isMonitoring={isMonitoring}\n                report={report}\n                startMonitoring={startMonitoring}\n                stopMonitoring={stopMonitoring}\n                generateReport={generateReport}\n                clearData={clearData}\n                autoRefresh={autoRefresh}\n                setAutoRefresh={setAutoRefresh}\n                refreshInterval={refreshInterval}\n                setRefreshInterval={setRefreshInterval}\n                expandedSections={expandedSections}\n                toggleSection={toggleSection}\n              />\n            )}\n            \n            {activeTab === 'system' && (\n              <SystemTab\n                systemInfo={systemInfo}\n                activeStreams={activeStreams}\n                expandedSections={expandedSections}\n                toggleSection={toggleSection}\n              />\n            )}\n            \n            {activeTab === 'logs' && (\n              <LogsTab\n                logs={filteredLogs}\n                logFilter={logFilter}\n                setLogFilter={setLogFilter}\n                clearLogs={() => setLogs([])}\n                expandedSections={expandedSections}\n                toggleSection={toggleSection}\n              />\n            )}\n            \n            {activeTab === 'network' && (\n              <NetworkTab\n                systemInfo={systemInfo}\n                expandedSections={expandedSections}\n                toggleSection={toggleSection}\n              />\n            )}\n            \n            {activeTab === 'storage' && (\n              <StorageTab\n                appState={appState}\n                expandedSections={expandedSections}\n                toggleSection={toggleSection}\n              />\n            )}\n          </ScrollView>\n        </LinearGradient>\n      </View>\n    </Modal>\n  );\n};\n\n// Performance Tab Component\nconst PerformanceTab: React.FC<any> = ({\n  isMonitoring,\n  report,\n  startMonitoring,\n  stopMonitoring,\n  generateReport,\n  clearData,\n  autoRefresh,\n  setAutoRefresh,\n  refreshInterval,\n  setRefreshInterval,\n  expandedSections,\n  toggleSection,\n}) => {\n  return (\n    <View style={styles.tabContent}>\n      {/* Monitoring Controls */}\n      <DebugCard\n        title=\"Performance Monitoring\"\n        icon={Activity}\n        expanded={expandedSections.has('monitoring')}\n        onToggle={() => toggleSection('monitoring')}\n      >\n        <View style={styles.controlsRow}>\n          <TouchableOpacity\n            style={[styles.controlButton, isMonitoring && styles.activeButton]}\n            onPress={isMonitoring ? stopMonitoring : startMonitoring}\n          >\n            {isMonitoring ? (\n              <Pause size={16} color={ModernTheme.colors.text.primary} />\n            ) : (\n              <Play size={16} color={ModernTheme.colors.text.primary} />\n            )}\n            <Text style={styles.controlButtonText}>\n              {isMonitoring ? 'Stop' : 'Start'} Monitoring\n            </Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity\n            style={styles.controlButton}\n            onPress={generateReport}\n          >\n            <RefreshCw size={16} color={ModernTheme.colors.text.primary} />\n            <Text style={styles.controlButtonText}>Refresh</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity\n            style={[styles.controlButton, styles.dangerButton]}\n            onPress={clearData}\n          >\n            <Trash2 size={16} color={ModernTheme.colors.text.primary} />\n            <Text style={styles.controlButtonText}>Clear</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <View style={styles.settingRow}>\n          <Text style={styles.settingLabel}>Auto Refresh</Text>\n          <Switch\n            value={autoRefresh}\n            onValueChange={setAutoRefresh}\n            trackColor={{ false: '#767577', true: ModernTheme.colors.primary[500] }}\n          />\n        </View>\n      </DebugCard>\n      \n      {/* Performance Metrics */}\n      {report && (\n        <DebugCard\n          title=\"Performance Summary\"\n          icon={BarChart3}\n          expanded={expandedSections.has('metrics')}\n          onToggle={() => toggleSection('metrics')}\n        >\n          <View style={styles.metricsGrid}>\n            <MetricCard\n              label=\"Avg Render Time\"\n              value={`${report.summary.avgRenderTime}ms`}\n              status={parseFloat(report.summary.avgRenderTime) < 16.67 ? 'good' : 'warning'}\n            />\n            <MetricCard\n              label=\"Avg FPS\"\n              value={report.summary.avgFPS}\n              status={parseFloat(report.summary.avgFPS) > 50 ? 'good' : 'warning'}\n            />\n            <MetricCard\n              label=\"Memory Usage\"\n              value={`${report.summary.avgMemoryUsage}MB`}\n              status={parseFloat(report.summary.avgMemoryUsage) < 100 ? 'good' : 'warning'}\n            />\n            <MetricCard\n              label=\"Network Latency\"\n              value={`${report.summary.networkLatency}ms`}\n              status={parseFloat(report.summary.networkLatency) < 500 ? 'good' : 'warning'}\n            />\n            <MetricCard\n              label=\"Error Count\"\n              value={report.summary.errorCount}\n              status={report.summary.errorCount === 0 ? 'good' : 'error'}\n            />\n            <MetricCard\n              label=\"Active Streams\"\n              value={report.summary.activeStreams}\n              status=\"info\"\n            />\n          </View>\n        </DebugCard>\n      )}\n      \n      {/* Recommendations */}\n      {report?.recommendations && (\n        <DebugCard\n          title=\"Optimization Recommendations\"\n          icon={Zap}\n          expanded={expandedSections.has('recommendations')}\n          onToggle={() => toggleSection('recommendations')}\n        >\n          {report.recommendations.map((rec, index) => (\n            <View key={index} style={styles.recommendationItem}>\n              <AlertCircle size={16} color={ModernTheme.colors.warning[500]} />\n              <Text style={styles.recommendationText}>{rec}</Text>\n            </View>\n          ))}\n        </DebugCard>\n      )}\n    </View>\n  );\n};\n\n// System Tab Component\nconst SystemTab: React.FC<any> = ({ systemInfo, activeStreams, expandedSections, toggleSection }) => {\n  return (\n    <View style={styles.tabContent}>\n      {systemInfo && (\n        <DebugCard\n          title=\"System Information\"\n          icon={Info}\n          expanded={expandedSections.has('system')}\n          onToggle={() => toggleSection('system')}\n        >\n          <InfoRow label=\"Platform\" value={systemInfo.platform} />\n          <InfoRow label=\"Version\" value={systemInfo.version} />\n          <InfoRow label=\"Screen\" value={`${systemInfo.screenDimensions.width}x${systemInfo.screenDimensions.height}`} />\n          {systemInfo.deviceMemory && (\n            <InfoRow label=\"Device Memory\" value={`${systemInfo.deviceMemory}GB`} />\n          )}\n          {systemInfo.batteryLevel !== undefined && (\n            <InfoRow \n              label=\"Battery\" \n              value={`${Math.round(systemInfo.batteryLevel * 100)}%${systemInfo.isCharging ? ' (Charging)' : ''}`} \n            />\n          )}\n        </DebugCard>\n      )}\n      \n      <DebugCard\n        title=\"Active Streams\"\n        icon={Monitor}\n        expanded={expandedSections.has('streams')}\n        onToggle={() => toggleSection('streams')}\n      >\n        {activeStreams.length === 0 ? (\n          <Text style={styles.emptyText}>No active streams</Text>\n        ) : (\n          activeStreams.map((stream, index) => (\n            <View key={stream.id} style={styles.streamItem}>\n              <Text style={styles.streamName}>{stream.user_name}</Text>\n              <Text style={styles.streamGame}>{stream.game_name}</Text>\n              <Text style={styles.streamViewers}>{stream.viewer_count?.toLocaleString()} viewers</Text>\n            </View>\n          ))\n        )}\n      </DebugCard>\n    </View>\n  );\n};\n\n// Logs Tab Component\nconst LogsTab: React.FC<any> = ({ logs, logFilter, setLogFilter, clearLogs, expandedSections, toggleSection }) => {\n  const renderLogItem = ({ item }: { item: LogEntry }) => {\n    const levelColors = {\n      debug: ModernTheme.colors.gray[500],\n      info: ModernTheme.colors.primary[500],\n      warn: ModernTheme.colors.warning[500],\n      error: ModernTheme.colors.error[500],\n    };\n    \n    return (\n      <View style={styles.logItem}>\n        <View style={styles.logHeader}>\n          <Text style={[styles.logLevel, { color: levelColors[item.level] }]}>\n            {item.level.toUpperCase()}\n          </Text>\n          <Text style={styles.logTimestamp}>\n            {new Date(item.timestamp).toLocaleTimeString()}\n          </Text>\n        </View>\n        <Text style={styles.logMessage}>{item.message}</Text>\n      </View>\n    );\n  };\n  \n  return (\n    <View style={styles.tabContent}>\n      <DebugCard\n        title=\"Console Logs\"\n        icon={FileText}\n        expanded={expandedSections.has('logs')}\n        onToggle={() => toggleSection('logs')}\n      >\n        <View style={styles.logControls}>\n          <TextInput\n            style={styles.logFilter}\n            placeholder=\"Filter logs...\"\n            placeholderTextColor={ModernTheme.colors.text.secondary}\n            value={logFilter}\n            onChangeText={setLogFilter}\n          />\n          <TouchableOpacity\n            style={[styles.controlButton, styles.dangerButton]}\n            onPress={clearLogs}\n          >\n            <Trash2 size={16} color={ModernTheme.colors.text.primary} />\n          </TouchableOpacity>\n        </View>\n        \n        <FlatList\n          data={logs}\n          renderItem={renderLogItem}\n          keyExtractor={item => item.id}\n          style={styles.logList}\n          showsVerticalScrollIndicator={false}\n        />\n      </DebugCard>\n    </View>\n  );\n};\n\n// Network Tab Component\nconst NetworkTab: React.FC<any> = ({ systemInfo, expandedSections, toggleSection }) => {\n  return (\n    <View style={styles.tabContent}>\n      <DebugCard\n        title=\"Network Information\"\n        icon={Network}\n        expanded={expandedSections.has('network')}\n        onToggle={() => toggleSection('network')}\n      >\n        {systemInfo?.connection ? (\n          <>\n            <InfoRow label=\"Connection Type\" value={systemInfo.connection.effectiveType || 'Unknown'} />\n            <InfoRow label=\"Downlink\" value={`${systemInfo.connection.downlink || 'Unknown'} Mbps`} />\n            <InfoRow label=\"RTT\" value={`${systemInfo.connection.rtt || 'Unknown'} ms`} />\n          </>\n        ) : (\n          <Text style={styles.emptyText}>Network information not available</Text>\n        )}\n      </DebugCard>\n    </View>\n  );\n};\n\n// Storage Tab Component\nconst StorageTab: React.FC<any> = ({ appState, expandedSections, toggleSection }) => {\n  const storageSize = JSON.stringify(appState).length;\n  \n  return (\n    <View style={styles.tabContent}>\n      <DebugCard\n        title=\"Storage Information\"\n        icon={HardDrive}\n        expanded={expandedSections.has('storage')}\n        onToggle={() => toggleSection('storage')}\n      >\n        <InfoRow label=\"App State Size\" value={`${(storageSize / 1024).toFixed(1)} KB`} />\n        <InfoRow label=\"Active Streams\" value={appState.activeStreams?.length || 0} />\n        <InfoRow label=\"Saved Layouts\" value={appState.savedLayouts?.length || 0} />\n        <InfoRow label=\"Theme\" value={appState.theme || 'Unknown'} />\n        <InfoRow label=\"Stream Quality\" value={appState.streamQuality || 'Unknown'} />\n      </DebugCard>\n    </View>\n  );\n};\n\n// Reusable Components\nconst DebugCard: React.FC<{\n  title: string;\n  icon: any;\n  children: React.ReactNode;\n  expanded: boolean;\n  onToggle: () => void;\n}> = ({ title, icon: IconComponent, children, expanded, onToggle }) => {\n  return (\n    <View style={styles.debugCard}>\n      <TouchableOpacity style={styles.cardHeader} onPress={onToggle}>\n        <View style={styles.cardHeaderLeft}>\n          <IconComponent size={18} color={ModernTheme.colors.primary[400]} />\n          <Text style={styles.cardTitle}>{title}</Text>\n        </View>\n        <Text style={styles.expandIcon}>{expanded ? '▼' : '▶'}</Text>\n      </TouchableOpacity>\n      {expanded && (\n        <View style={styles.cardContent}>\n          {children}\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst MetricCard: React.FC<{\n  label: string;\n  value: string | number;\n  status: 'good' | 'warning' | 'error' | 'info';\n}> = ({ label, value, status }) => {\n  const statusColors = {\n    good: ModernTheme.colors.success[500],\n    warning: ModernTheme.colors.warning[500],\n    error: ModernTheme.colors.error[500],\n    info: ModernTheme.colors.primary[500],\n  };\n  \n  return (\n    <View style={[styles.metricCard, { borderLeftColor: statusColors[status] }]}>\n      <Text style={styles.metricLabel}>{label}</Text>\n      <Text style={styles.metricValue}>{value}</Text>\n    </View>\n  );\n};\n\nconst InfoRow: React.FC<{ label: string; value: string | number }> = ({ label, value }) => {\n  return (\n    <View style={styles.infoRow}>\n      <Text style={styles.infoLabel}>{label}:</Text>\n      <Text style={styles.infoValue}>{value}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  gradient: {\n    flex: 1,\n  },\n  header: {\n    paddingTop: 50,\n  },\n  headerGradient: {\n    paddingBottom: 16,\n  },\n  headerContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n  },\n  headerLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  headerTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: ModernTheme.colors.text.primary,\n    marginLeft: 12,\n  },\n  headerRight: {\n    flexDirection: 'row',\n    gap: 8,\n  },\n  headerButton: {\n    padding: 8,\n    borderRadius: 8,\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n  },\n  tabContainer: {\n    borderBottomWidth: 1,\n    borderBottomColor: ModernTheme.colors.border.primary,\n  },\n  tab: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n    gap: 6,\n  },\n  activeTab: {\n    borderBottomWidth: 2,\n    borderBottomColor: ModernTheme.colors.primary[400],\n  },\n  tabText: {\n    fontSize: 14,\n    color: ModernTheme.colors.text.secondary,\n  },\n  activeTabText: {\n    color: ModernTheme.colors.primary[400],\n    fontWeight: '600',\n  },\n  content: {\n    flex: 1,\n    padding: 16,\n  },\n  tabContent: {\n    gap: 16,\n  },\n  debugCard: {\n    backgroundColor: ModernTheme.colors.background.secondary,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: ModernTheme.colors.border.primary,\n    overflow: 'hidden',\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: 16,\n    backgroundColor: 'rgba(255, 255, 255, 0.02)',\n  },\n  cardHeaderLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  cardTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: ModernTheme.colors.text.primary,\n  },\n  expandIcon: {\n    fontSize: 12,\n    color: ModernTheme.colors.text.secondary,\n  },\n  cardContent: {\n    padding: 16,\n    paddingTop: 0,\n  },\n  controlsRow: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 16,\n  },\n  controlButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: ModernTheme.colors.primary[600],\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    borderRadius: 8,\n    gap: 6,\n  },\n  activeButton: {\n    backgroundColor: ModernTheme.colors.success[600],\n  },\n  dangerButton: {\n    backgroundColor: ModernTheme.colors.error[600],\n  },\n  controlButtonText: {\n    color: ModernTheme.colors.text.primary,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  settingRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 8,\n  },\n  settingLabel: {\n    fontSize: 14,\n    color: ModernTheme.colors.text.primary,\n  },\n  metricsGrid: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  metricCard: {\n    flex: 1,\n    minWidth: '45%',\n    backgroundColor: 'rgba(255, 255, 255, 0.02)',\n    padding: 12,\n    borderRadius: 8,\n    borderLeftWidth: 3,\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: ModernTheme.colors.text.secondary,\n    marginBottom: 4,\n  },\n  metricValue: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: ModernTheme.colors.text.primary,\n  },\n  recommendationItem: {\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    gap: 8,\n    marginBottom: 12,\n  },\n  recommendationText: {\n    flex: 1,\n    fontSize: 14,\n    color: ModernTheme.colors.text.primary,\n    lineHeight: 20,\n  },\n  infoRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingVertical: 6,\n  },\n  infoLabel: {\n    fontSize: 14,\n    color: ModernTheme.colors.text.secondary,\n  },\n  infoValue: {\n    fontSize: 14,\n    color: ModernTheme.colors.text.primary,\n    fontWeight: '500',\n  },\n  emptyText: {\n    fontSize: 14,\n    color: ModernTheme.colors.text.secondary,\n    textAlign: 'center',\n    fontStyle: 'italic',\n  },\n  streamItem: {\n    padding: 12,\n    backgroundColor: 'rgba(255, 255, 255, 0.02)',\n    borderRadius: 8,\n    marginBottom: 8,\n  },\n  streamName: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    color: ModernTheme.colors.text.primary,\n  },\n  streamGame: {\n    fontSize: 12,\n    color: ModernTheme.colors.text.secondary,\n  },\n  streamViewers: {\n    fontSize: 12,\n    color: ModernTheme.colors.primary[400],\n  },\n  logControls: {\n    flexDirection: 'row',\n    gap: 8,\n    marginBottom: 12,\n  },\n  logFilter: {\n    flex: 1,\n    backgroundColor: 'rgba(255, 255, 255, 0.05)',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    color: ModernTheme.colors.text.primary,\n    fontSize: 14,\n  },\n  logList: {\n    maxHeight: 300,\n  },\n  logItem: {\n    backgroundColor: 'rgba(255, 255, 255, 0.02)',\n    padding: 12,\n    borderRadius: 6,\n    marginBottom: 6,\n  },\n  logHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  logLevel: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    letterSpacing: 0.5,\n  },\n  logTimestamp: {\n    fontSize: 10,\n    color: ModernTheme.colors.text.secondary,\n    fontFamily: 'monospace',\n  },\n  logMessage: {\n    fontSize: 12,\n    color: ModernTheme.colors.text.primary,\n    fontFamily: 'monospace',\n    lineHeight: 16,\n  },\n});\n\nexport default DebugDashboard;